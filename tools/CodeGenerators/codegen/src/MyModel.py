from Model import *
from DataType import *

class MyModel(Model):
    def __init__(self):
        Model.__init__(self, 'Model')
        self.setupDataTypes()
        self.setupDatabases()
        self.setupPythonModules()
    def setupDataTypes(self):
        self.createDataType('Integer')
        self.createDataType('Unicode')
        self.createDataType('Float')
        self.createDataType('Date')
        self.createDataType('Time')
        self.createDataType('Timestamp')
    def setupDatabases(self):
        self.createDatabase('profilelogger')
        self.setupTablesInProfileLogger()
    def setupTablesInProfileLogger(self):
        db = self.createDatabase('profilelogger')
        s = db.createSchema('data')
        self.setupTableGraphicPrimitives(s)
        self.setupTableProjects(s)
        self.setupTableLengthUnits(s)
        self.setupTableProfiles(s)
        self.setupTableBeds(s)
        self.setupTableColors(s)
        self.setupTableColorsInBed(s)
        self.setupTableTectonicUnitTypes(s)
        self.setupTableTectonicUnits(s)
        self.setupTableTectonicUnitsInBed(s)
        self.setupTableSedimentologicUnitTypes(s)
        self.setupTableSedimentologicUnits(s)
        self.setupTableSedimentologicUnitsInBed(s)
        self.setupTableStratigraphicUnitTypes(s)
        self.setupTableStratigraphicUnits(s)
        self.setupTableStratigraphicUnitsInBed(s)
        self.setupTableFossils(s)
        self.setupTableFossilsInBed(s)
        self.setupTableBeddingTypes(s)
        self.setupTableBeddingTypesInBed(s)
        self.setupTableBoundaryTypes(s)
        self.setupTableBoundaryTypesInBed(s)
        self.setupTableSedimentStructures(s)
        self.setupTableSedimentStructuresInBed(s)
        self.setupTableCustomSymbols(s)
        self.setupTableCustomSymbolsInBed(s)
        self.setupTableFieldBooks(s)
        self.setupTableFieldBookEntries(s)
    def setupTableGraphicPrimitives(self, s):
        t = s.createTable('graphic_primitives', hasNameColumn=True, nameColumnIsUnique=True, hasDescriptionColumn=True)
        t.createColumn('svg_data', self.dataType('Unicode'), nullable=False, defaultText='')
        t.createColumn('original_path', self.dataType('Unicode'), nullable=False, defaultText='')
    def setupTableTectonicUnitTypes(self, s):
        t = s.createTable('tectonic_unit_types', hasNameColumn=True, nameColumnIsUnique=True, hasDescriptionColumn=True)
        t.createColumn('project_id', nullable=False, referencedColumn=s.table('projects').column('id'))
        t.createUniqueConstraint('u_tectonic_unit_types_name', [t.column('name')])
    def setupTableTectonicUnits(self, s):
        t = s.createTable('tectonic_units', hasNameColumn=True, hasDescriptionColumn=True)
        t.createColumn('project_id', nullable=False, referencedColumn=s.table('projects').column('id'))
        t.createColumn('tectonic_unit_type_id', nullable=False, referencedColumn=s.table('tectonic_unit_types').column('id'))
        t.createColumn('graphic_primitive_id', nullable=False, referencedColumn=s.table('graphic_primitives').column('id'))
        t.createUniqueConstraint('u_tectonic_unit_in_project', [t.column('name'), t.column('project_id')])
    def setupTableTectonicUnitsInBed(self, s):
        t = s.createTable('tectonic_units_in_beds', hasDescriptionColumn=True)
        t.createColumn('base', self.dataType('Integer'), nullable=False, defaultValue=0)
        t.createColumn('top', self.dataType('Integer'), nullable=False, defaultValue=100)
        t.createColumn('bed_id', nullable=False, referencedColumn=s.table('beds').column('id'))
        t.createColumn('tectonic_unit_id', nullable=False, referencedColumn=s.table('tectonic_units').column('id'))
        t.createRangeCheckConstraint('chk_tectonic_units_in_beds_base_in_range', t.column('base'), 0, 100)
        t.createRangeCheckConstraint('chk_tectonic_units_in_beds_top_in_range', t.column('top'), 0, 100)
    def setupTableSedimentologicUnitTypes(self, s):
        t = s.createTable('sedimentologic_unit_types', hasNameColumn=True, nameColumnIsUnique=True, hasDescriptionColumn=True)
        t.createColumn('project_id', nullable=False, referencedColumn=s.table('projects').column('id'))
        t.createUniqueConstraint('u_sedimentologic_unit_types_name', [t.column('name')])
    def setupTableSedimentologicUnits(self, s):
        t = s.createTable('sedimentologic_units', hasNameColumn=True, hasDescriptionColumn=True)
        t.createColumn('project_id', nullable=False, referencedColumn=s.table('projects').column('id'))
        t.createColumn('sedimentologic_unit_type_id', nullable=False, referencedColumn=s.table('sedimentologic_unit_types').column('id'))
        t.createColumn('graphic_primitive_id', nullable=False, referencedColumn=s.table('graphic_primitives').column('id'))
        t.createUniqueConstraint('u_sedimentologic_unit_in_project', [t.column('name'), t.column('project_id')])
    def setupTableSedimentologicUnitsInBed(self, s):
        t = s.createTable('sedimentologic_units_in_beds', hasDescriptionColumn=True)
        t.createColumn('base', self.dataType('Integer'), nullable=False, defaultValue=0)
        t.createColumn('top', self.dataType('Integer'), nullable=False, defaultValue=100)
        t.createColumn('bed_id', nullable=False, referencedColumn=s.table('beds').column('id'))
        t.createColumn('sedimentologic_unit_id', nullable=False, referencedColumn=s.table('sedimentologic_units').column('id'))
        t.createRangeCheckConstraint('chk_sedimentologic_units_in_beds_base_in_range', t.column('base'), 0, 100)
        t.createRangeCheckConstraint('chk_sedimentologic_units_in_beds_top_in_range', t.column('top'), 0, 100)
    def setupTableStratigraphicUnitTypes(self, s):
        t = s.createTable('stratigraphic_unit_types', hasNameColumn=True, nameColumnIsUnique=True, hasDescriptionColumn=True)
        t.createColumn('project_id', nullable=False, referencedColumn=s.table('projects').column('id'))
        t.createUniqueConstraint('u_stratigraphic_unit_types_name', [t.column('name')])
    def setupTableStratigraphicUnits(self, s):
        t = s.createTable('stratigraphic_units', hasNameColumn=True, hasDescriptionColumn=True)
        t.createColumn('project_id', nullable=False, referencedColumn=s.table('projects').column('id'))
        t.createColumn('stratigraphic_unit_type_id', nullable=False, referencedColumn=s.table('stratigraphic_unit_types').column('id'))
        t.createColumn('graphic_primitive_id', nullable=False, referencedColumn=s.table('graphic_primitives').column('id'))
        t.createUniqueConstraint('u_stratigraphic_unit_in_project', [t.column('name'), t.column('project_id')])
    def setupTableStratigraphicUnitsInBed(self, s):
        t = s.createTable('stratigraphic_units_in_beds', hasDescriptionColumn=True)
        t.createColumn('base', self.dataType('Integer'), nullable=False, defaultValue=0)
        t.createColumn('top', self.dataType('Integer'), nullable=False, defaultValue=100)
        t.createColumn('bed_id', nullable=False, referencedColumn=s.table('beds').column('id'))
        t.createColumn('stratigraphic_unit_id', nullable=False, referencedColumn=s.table('stratigraphic_units').column('id'))
        t.createRangeCheckConstraint('chk_stratigraphic_units_in_beds_base_in_range', t.column('base'), 0, 100)
        t.createRangeCheckConstraint('chk_stratigraphic_units_in_beds_top_in_range', t.column('top'), 0, 100)
    def setupTableColors(self, s):
        t = s.createTable('colors', hasNameColumn=True, hasDescriptionColumn=True)
        t.createColumn('project_id', nullable=False, referencedColumn=s.table('projects').column('id'))
        t.createColumn('graphic_primitive_id', nullable=False, referencedColumn=s.table('graphic_primitives').column('id'))
        t.createUniqueConstraint('u_colors_name', [t.column('name'), t.column('project_id'), ])
    def setupTableColorsInBed(self, s):
        t = s.createTable('colors_in_beds', hasDescriptionColumn=True)
        t.createColumn('base', self.dataType('Integer'), nullable=False, defaultValue=0)
        t.createColumn('top', self.dataType('Integer'), nullable=False, defaultValue=100)
        t.createColumn('bed_id', nullable=False, referencedColumn=s.table('beds').column('id'))
        t.createColumn('color_id', nullable=False, referencedColumn=s.table('colors').column('id'))
        t.createRangeCheckConstraint('chk_colors_in_beds_base_in_range', t.column('base'), 0, 100)
        t.createRangeCheckConstraint('chk_colors_in_beds_top_in_range', t.column('top'), 0, 100)
    def setupTableFossils(self, s):
        t = s.createTable('fossils', hasNameColumn=True, hasDescriptionColumn=True)
        t.createColumn('project_id', nullable=False, referencedColumn=s.table('projects').column('id'))
        t.createColumn('graphic_primitive_id', nullable=False, referencedColumn=s.table('graphic_primitives').column('id'))
        t.createUniqueConstraint('u_fossils_name', [t.column('name'), t.column('project_id'), ])
    def setupTableFossilsInBed(self, s):
        t = s.createTable('fossils_in_beds', hasDescriptionColumn=True)
        t.createColumn('base', self.dataType('Integer'), nullable=False, defaultValue=0)
        t.createColumn('top', self.dataType('Integer'), nullable=False, defaultValue=100)
        t.createColumn('bed_id', nullable=False, referencedColumn=s.table('beds').column('id'))
        t.createColumn('fossil_id', nullable=False, referencedColumn=s.table('fossils').column('id'))
        t.createRangeCheckConstraint('chk_fossils_in_beds_base_in_range', t.column('base'), 0, 100)
        t.createRangeCheckConstraint('chk_fossils_in_beds_top_in_range', t.column('top'), 0, 100)
    def setupTableBeddingTypes(self, s):
        t = s.createTable('bedding_types', hasNameColumn=True, hasDescriptionColumn=True)
        t.createColumn('project_id', nullable=False, referencedColumn=s.table('projects').column('id'))
        t.createColumn('graphic_primitive_id', nullable=False, referencedColumn=s.table('graphic_primitives').column('id'))
        t.createUniqueConstraint('u_bedding_types_name', [t.column('name'), t.column('project_id'), ])
    def setupTableBeddingTypesInBed(self, s):
        t = s.createTable('bedding_types_in_beds', hasDescriptionColumn=True)
        t.createColumn('base', self.dataType('Integer'), nullable=False, defaultValue=0)
        t.createColumn('top', self.dataType('Integer'), nullable=False, defaultValue=100)
        t.createColumn('bed_id', nullable=False, referencedColumn=s.table('beds').column('id'))
        t.createColumn('bedding_type_id', nullable=False, referencedColumn=s.table('bedding_types').column('id'))
        t.createRangeCheckConstraint('chk_bedding_types_in_beds_base_in_range', t.column('base'), 0, 100)
        t.createRangeCheckConstraint('chk_bedding_types_in_beds_top_in_range', t.column('top'), 0, 100)
    def setupTableBoundaryTypes(self, s):
        t = s.createTable('boundary_types', hasNameColumn=True, hasDescriptionColumn=True)
        t.createColumn('project_id', nullable=False, referencedColumn=s.table('projects').column('id'))
        t.createColumn('graphic_primitive_id', nullable=False, referencedColumn=s.table('graphic_primitives').column('id'))
        t.createUniqueConstraint('u_boundary_types_name', [t.column('name'), t.column('project_id'), ])
    def setupTableBoundaryTypesInBed(self, s):
        t = s.createTable('boundary_types_in_beds', hasDescriptionColumn=True)
        t.createColumn('base', self.dataType('Integer'), nullable=False, defaultValue=0)
        t.createColumn('top', self.dataType('Integer'), nullable=False, defaultValue=100)
        t.createColumn('bed_id', nullable=False, referencedColumn=s.table('beds').column('id'))
        t.createColumn('boundary_type_id', nullable=False, referencedColumn=s.table('boundary_types').column('id'))
        t.createRangeCheckConstraint('chk_boundary_types_in_beds_base_in_range', t.column('base'), 0, 100)
        t.createRangeCheckConstraint('chk_boundary_types_in_beds_top_in_range', t.column('top'), 0, 100)
    def setupTableSedimentStructures(self, s):
        t = s.createTable('sediment_structures', hasNameColumn=True, hasDescriptionColumn=True)
        t.createColumn('project_id', nullable=False, referencedColumn=s.table('projects').column('id'))
        t.createColumn('graphic_primitive_id', nullable=False, referencedColumn=s.table('graphic_primitives').column('id'))
        t.createUniqueConstraint('u_sediment_structures_name', [t.column('name'), t.column('project_id'), ])
    def setupTableSedimentStructuresInBed(self, s):
        t = s.createTable('sediment_structures_in_beds', hasDescriptionColumn=True)
        t.createColumn('base', self.dataType('Integer'), nullable=False, defaultValue=0)
        t.createColumn('top', self.dataType('Integer'), nullable=False, defaultValue=100)
        t.createColumn('bed_id', nullable=False, referencedColumn=s.table('beds').column('id'))
        t.createColumn('sediment_structure_id', nullable=False, referencedColumn=s.table('sediment_structures').column('id'))
        t.createRangeCheckConstraint('chk_sediment_structures_in_beds_base_in_range', t.column('base'), 0, 100)
        t.createRangeCheckConstraint('chk_sediment_structures_in_beds_top_in_range', t.column('top'), 0, 100)
    def setupTableCustomSymbols(self, s):
        t = s.createTable('custom_symbols', hasNameColumn=True, hasDescriptionColumn=True)
        t.createColumn('project_id', nullable=False, referencedColumn=s.table('projects').column('id'))
        t.createColumn('graphic_primitive_id', nullable=False, referencedColumn=s.table('graphic_primitives').column('id'))
        t.createUniqueConstraint('u_custom_symbols_name', [t.column('name'), t.column('project_id'), ])
    def setupTableCustomSymbolsInBed(self, s):
        t = s.createTable('custom_symbols_in_beds', hasDescriptionColumn=True)
        t.createColumn('base', self.dataType('Integer'), nullable=False, defaultValue=0)
        t.createColumn('top', self.dataType('Integer'), nullable=False, defaultValue=100)
        t.createColumn('bed_id', nullable=False, referencedColumn=s.table('beds').column('id'))
        t.createColumn('custom_symbol_id', nullable=False, referencedColumn=s.table('custom_symbols').column('id'))
        t.createRangeCheckConstraint('chk_custom_symbols_in_beds_base_in_range', t.column('base'), 0, 100)
        t.createRangeCheckConstraint('chk_custom_symbols_in_beds_top_in_range', t.column('top'), 0, 100)
    def setupTableLengthUnits(self, s):
        t = s.createTable('length_units', hasNameColumn=True, nameColumnIsUnique=True, hasDescriptionColumn=True)
        t.createColumn('micro_metres', self.dataType('Integer'), nullable=False, defaultValue=0, isUnique=True)
    def setupTableBeds(self, s):
        t = s.createTable('beds', hasDescriptionColumn=True)
        t.createColumn('position', self.dataType('Integer'), nullable=False)
        t.createColumn('bed_number', self.dataType('Unicode'), nullable=False, isUnique=True, notEmpty=True)
        t.createColumn('profile_id', nullable=False, referencedColumn=s.table('projects').column('id'))
        t.createColumn('height', self.dataType('Integer'), nullable=False, defaultValue=0)
        t.createColumn('height_length_unit_id', nullable=False, referencedColumn=s.table('length_units').column('id'))
        t.createUniqueConstraint('u_bed_number_in_profile', [t.column('profile_id'), t.column('bed_number'),])
    def setupTableFieldBookEntries(self, s):
        t = s.createTable('field_book_entries')
        t.createColumn('field_book_id', nullable=False, referencedColumn=s.table('projects').column('id'))
    def setupTableFieldBooks(self, s):
        t = s.createTable('field_books', hasDescriptionColumn=True)
        t.createColumn('title', self.dataType('Unicode'), defaultText='new field book', notEmpty=True)
    def setupTableProjects(self, s):
        t = s.createTable('projects', hasNameColumn=True, hasDescriptionColumn=True)
    def setupTableProfiles(self, s):
        t = s.createTable('profiles', hasNameColumn=True, hasDescriptionColumn=True)
        t.createColumn('project_id', nullable=False, referencedColumn=s.table('projects').column('id'))
        t.createUniqueConstraint('u_profile_name_in_project', [t.column('project_id'), t.column('name'),])
    def setupPythonModules(self):
        model = self.createPythonModule('Model')
        classEntity = model.createClass('Entity', None, None)
        self.setupLengthUnitClass(model, classEntity, self.database.schema('data').table('length_units'))
        self.setupGraphicPrimitiveClass(model, classEntity, self.database.schema('data').table('graphic_primitives'))
        self.setupProjectClass(model, classEntity, self.database.schema('data').table('projects'))
        self.setupTectonicUnitTypeClass(model, classEntity, self.database.schema('data').table('tectonic_unit_types'))
        self.setupTectonicUnitClass(model, classEntity, self.database.schema('data').table('tectonic_units'))
        self.setupTectonicUnitInBedClass(model, classEntity, self.database.schema('data').table('tectonic_units_in_beds'))
        self.setupSedimentologicUnitTypeClass(model, classEntity, self.database.schema('data').table('sedimentologic_unit_types'))
        self.setupSedimentologicUnitClass(model, classEntity, self.database.schema('data').table('sedimentologic_units'))
        self.setupSedimentologicUnitInBedClass(model, classEntity, self.database.schema('data').table('sedimentologic_units_in_beds'))
        self.setupStratigraphicUnitTypeClass(model, classEntity, self.database.schema('data').table('stratigraphic_unit_types'))
        self.setupStratigraphicUnitClass(model, classEntity, self.database.schema('data').table('stratigraphic_units'))
        self.setupStratigraphicUnitInBedClass(model, classEntity, self.database.schema('data').table('stratigraphic_units_in_beds'))
        self.setupColorClass(model, classEntity, self.database.schema('data').table('colors'))
        self.setupColorInBedClass(model, classEntity, self.database.schema('data').table('colors_in_beds'))
        self.setupFossilClass(model, classEntity, self.database.schema('data').table('fossils'))
        self.setupFossilInBedClass(model, classEntity, self.database.schema('data').table('fossils_in_beds'))
        self.setupBeddingTypeClass(model, classEntity, self.database.schema('data').table('bedding_types'))
        self.setupBeddingTypeInBedClass(model, classEntity, self.database.schema('data').table('bedding_types_in_beds'))
        self.setupBoundaryTypeClass(model, classEntity, self.database.schema('data').table('boundary_types'))
        self.setupBoundaryTypeInBedClass(model, classEntity, self.database.schema('data').table('boundary_types_in_beds'))
        self.setupSedimentStructureClass(model, classEntity, self.database.schema('data').table('sediment_structures'))
        self.setupSedimentStructureInBedClass(model, classEntity, self.database.schema('data').table('sediment_structures_in_beds'))
        self.setupCustomSymbolClass(model, classEntity, self.database.schema('data').table('custom_symbols'))
        self.setupCustomSymbolInBedClass(model, classEntity, self.database.schema('data').table('custom_symbols_in_beds'))
        self.setupProfileClass(model, classEntity, self.database.schema('data').table('profiles'))
        self.setupFieldBookClass(model, classEntity, self.database.schema('data').table('field_books'))
        self.setupFieldBookEntryClass(model, classEntity, self.database.schema('data').table('field_book_entries'))
        self.setupBedClass(model, classEntity, self.database.schema('data').table('beds'))
    def setupGraphicPrimitiveClass(self, module, baseClass, table):
        c = module.createClass('GraphicPrimitive', baseClass, table, createIdField=True, createNameField=True, createDescriptionField=True)
        c.createField(table.column('svg_data'), 'svgData')
        c.createField(table.column('original_path'), 'originalPath')
    def setupColorClass(self, module, baseClass, table):
        c = module.createClass('Color', baseClass, table, createIdField=True, createNameField=True, createDescriptionField=True)
        c.createField(table.column('project_id'), 'project', backrefName='colors', relationClass='Project', cascade='all')
        c.createField(table.column('graphic_primitive_id'), 'graphicPrimitive', backrefName='colors', relationClass='GraphicPrimitive', cascade='all')
        c.addSortOrder(c.field('name'), ascending=True)
    def setupTectonicUnitTypeClass(self, module, baseClass, table):
        c = module.createClass('TectonicUnitType', baseClass, table, createIdField=True, createNameField=True, createDescriptionField=True)
        c.createField(table.column('project_id'), 'project', backrefName='tectonic_unit_types', relationClass='Project', cascade='all')
        c.addSortOrder(c.field('name'), ascending=True)
    def setupTectonicUnitClass(self, module, baseClass, table):
        c = module.createClass('TectonicUnit', baseClass, table, createIdField=True, createNameField=True, createDescriptionField=True)
        c.createField(table.column('project_id'), 'project', backrefName='tectonic_units', relationClass='Project', cascade='all')
        c.createField(table.column('tectonic_unit_type_id'), 'tectonicUnitType', backrefName='tectonicUnits', relationClass='TectonicUnitType', cascade='all')                  
        c.createField(table.column('graphic_primitive_id'), 'graphicPrimitive', backrefName='tectonicUnits', relationClass='GraphicPrimitive', cascade='all')
        c.addSortOrder(c.field('name'), ascending=True)
    def setupTectonicUnitInBedClass(self, module, baseClass, table):
        c = module.createClass('TectonicUnitInBed', baseClass, table, createIdField=True, createDescriptionField=True)
        c.createField(table.column('base'), 'base')
        c.createField(table.column('top'), 'top')
        c.createField(table.column('bed_id'), 'bed', backrefName='tectonic_units', relationClass='Bed', cascade='all')
        c.createField(table.column('tectonic_unit_id'), 'tectonic_unit', backrefName='beds', relationClass='TectonicUnit', cascade='all')
    def setupSedimentologicUnitTypeClass(self, module, baseClass, table):
        c = module.createClass('SedimentologicUnitType', baseClass, table, createIdField=True, createNameField=True, createDescriptionField=True)
        c.createField(table.column('project_id'), 'project', backrefName='sedimentologic_unit_types', relationClass='Project', cascade='all')
        c.addSortOrder(c.field('name'), ascending=True)
    def setupSedimentologicUnitClass(self, module, baseClass, table):
        c = module.createClass('SedimentologicUnit', baseClass, table, createIdField=True, createNameField=True, createDescriptionField=True)
        c.createField(table.column('project_id'), 'project', backrefName='sedimentologic_units', relationClass='Project', cascade='all')
        c.createField(table.column('sedimentologic_unit_type_id'), 'sedimentologicUnitType', backrefName='sedimentologicUnits', relationClass='SedimentologicUnitType', cascade='all')                  
        c.createField(table.column('graphic_primitive_id'), 'graphicPrimitive', backrefName='sedimentologicUnits', relationClass='GraphicPrimitive', cascade='all')
        c.addSortOrder(c.field('name'), ascending=True)
    def setupSedimentologicUnitInBedClass(self, module, baseClass, table):
        c = module.createClass('SedimentologicUnitInBed', baseClass, table, createIdField=True, createDescriptionField=True)
        c.createField(table.column('base'), 'base')
        c.createField(table.column('top'), 'top')
        c.createField(table.column('bed_id'), 'bed', backrefName='sedimentologic_units', relationClass='Bed', cascade='all')
        c.createField(table.column('sedimentologic_unit_id'), 'sedimentologic_unit', backrefName='beds', relationClass='SedimentologicUnit', cascade='all')
    def setupStratigraphicUnitTypeClass(self, module, baseClass, table):
        c = module.createClass('StratigraphicUnitType', baseClass, table, createIdField=True, createNameField=True, createDescriptionField=True)
        c.createField(table.column('project_id'), 'project', backrefName='stratigraphic_unit_types', relationClass='Project', cascade='all')
        c.addSortOrder(c.field('name'), ascending=True)
    def setupStratigraphicUnitClass(self, module, baseClass, table):
        c = module.createClass('StratigraphicUnit', baseClass, table, createIdField=True, createNameField=True, createDescriptionField=True)
        c.createField(table.column('project_id'), 'project', backrefName='stratigraphic_units', relationClass='Project', cascade='all')
        c.createField(table.column('stratigraphic_unit_type_id'), 'stratigraphicUnitType', backrefName='stratigraphicUnits', relationClass='StratigraphicUnitType', cascade='all')                  
        c.createField(table.column('graphic_primitive_id'), 'graphicPrimitive', backrefName='stratigraphicUnits', relationClass='GraphicPrimitive', cascade='all')
        c.addSortOrder(c.field('name'), ascending=True)
    def setupStratigraphicUnitInBedClass(self, module, baseClass, table):
        c = module.createClass('StratigraphicUnitInBed', baseClass, table, createIdField=True, createDescriptionField=True)
        c.createField(table.column('base'), 'base')
        c.createField(table.column('top'), 'top')
        c.createField(table.column('bed_id'), 'bed', backrefName='stratigraphic_units', relationClass='Bed', cascade='all')
        c.createField(table.column('stratigraphic_unit_id'), 'stratigraphic_unit', backrefName='beds', relationClass='StratigraphicUnit', cascade='all')
    def setupColorInBedClass(self, module, baseClass, table):
        c = module.createClass('ColorInBed', baseClass, table, createIdField=True, createDescriptionField=True)
        c.createField(table.column('base'), 'base')
        c.createField(table.column('top'), 'top')
        c.createField(table.column('bed_id'), 'bed', backrefName='colors', relationClass='Bed', cascade='all')
        c.createField(table.column('color_id'), 'color', backrefName='beds', relationClass='Color', cascade='all')
    def setupFossilClass(self, module, baseClass, table):
        c = module.createClass('Fossil', baseClass, table, createIdField=True, createNameField=True, createDescriptionField=True)
        c.createField(table.column('project_id'), 'project', backrefName='fossils', relationClass='Project', cascade='all')
        c.createField(table.column('graphic_primitive_id'), 'graphicPrimitive', backrefName='fossils', relationClass='GraphicPrimitive', cascade='all')
        c.addSortOrder(c.field('name'), ascending=True)
    def setupFossilInBedClass(self, module, baseClass, table):
        c = module.createClass('FossilInBed', baseClass, table, createIdField=True, createDescriptionField=True)
        c.createField(table.column('base'), 'base')
        c.createField(table.column('top'), 'top')
        c.createField(table.column('bed_id'), 'bed', backrefName='fossils', relationClass='Bed', cascade='all')
        c.createField(table.column('fossil_id'), 'fossil', backrefName='beds', relationClass='Fossil', cascade='all')
    def setupBeddingTypeClass(self, module, baseClass, table):
        c = module.createClass('BeddingType', baseClass, table, createIdField=True, createNameField=True, createDescriptionField=True)
        c.createField(table.column('project_id'), 'project', backrefName='beddingTypes', relationClass='Project', cascade='all')
        c.createField(table.column('graphic_primitive_id'), 'graphicPrimitive', backrefName='beddingTypes', relationClass='GraphicPrimitive', cascade='all')
        c.addSortOrder(c.field('name'), ascending=True)
    def setupBeddingTypeInBedClass(self, module, baseClass, table):
        c = module.createClass('BeddingTypeInBed', baseClass, table, createIdField=True, createDescriptionField=True)
        c.createField(table.column('base'), 'base')
        c.createField(table.column('top'), 'top')
        c.createField(table.column('bed_id'), 'bed', backrefName='colors', relationClass='Bed', cascade='all')
        c.createField(table.column('bedding_type_id'), 'beddingType', backrefName='beds', relationClass='BeddingType', cascade='all')
    def setupBoundaryTypeClass(self, module, baseClass, table):
        c = module.createClass('BoundaryType', baseClass, table, createIdField=True, createNameField=True, createDescriptionField=True)
        c.createField(table.column('project_id'), 'project', backrefName='boundaryTypes', relationClass='Project', cascade='all')
        c.createField(table.column('graphic_primitive_id'), 'graphicPrimitive', backrefName='boundaryTypes', relationClass='GraphicPrimitive', cascade='all')
        c.addSortOrder(c.field('name'), ascending=True)
    def setupBoundaryTypeInBedClass(self, module, baseClass, table):
        c = module.createClass('BoundaryTypeInBed', baseClass, table, createIdField=True, createDescriptionField=True)
        c.createField(table.column('base'), 'base')
        c.createField(table.column('top'), 'top')
        c.createField(table.column('bed_id'), 'bed', backrefName='colors', relationClass='Bed', cascade='all')
        c.createField(table.column('boundary_type_id'), 'boundaryType', backrefName='beds', relationClass='BoundaryType', cascade='all')
    def setupSedimentStructureClass(self, module, baseClass, table):
        c = module.createClass('SedimentStructure', baseClass, table, createIdField=True, createNameField=True, createDescriptionField=True)
        c.createField(table.column('project_id'), 'project', backrefName='sedimentStructures', relationClass='Project', cascade='all')
        c.createField(table.column('graphic_primitive_id'), 'graphicPrimitive', backrefName='sedimentStructures', relationClass='GraphicPrimitive', cascade='all')
        c.addSortOrder(c.field('name'), ascending=True)
    def setupSedimentStructureInBedClass(self, module, baseClass, table):
        c = module.createClass('SedimentStructureInBed', baseClass, table, createIdField=True, createDescriptionField=True)
        c.createField(table.column('base'), 'base')
        c.createField(table.column('top'), 'top')
        c.createField(table.column('bed_id'), 'bed', backrefName='colors', relationClass='Bed', cascade='all')
        c.createField(table.column('sediment_structure_id'), 'sedimentStructure', backrefName='beds', relationClass='SedimentStructure', cascade='all')
    def setupCustomSymbolClass(self, module, baseClass, table):
        c = module.createClass('CustomSymbol', baseClass, table, createIdField=True, createNameField=True, createDescriptionField=True)
        c.createField(table.column('project_id'), 'project', backrefName='customSymbols', relationClass='Project', cascade='all')
        c.createField(table.column('graphic_primitive_id'), 'graphicPrimitive', backrefName='customSymbols', relationClass='GraphicPrimitive', cascade='all')
        c.addSortOrder(c.field('name'), ascending=True)
    def setupCustomSymbolInBedClass(self, module, baseClass, table):
        c = module.createClass('CustomSymbolInBed', baseClass, table, createIdField=True, createDescriptionField=True)
        c.createField(table.column('base'), 'base')
        c.createField(table.column('top'), 'top')
        c.createField(table.column('bed_id'), 'bed', backrefName='colors', relationClass='Bed', cascade='all')
        c.createField(table.column('custom_symbol_id'), 'customSymbol', backrefName='beds', relationClass='CustomSymbol', cascade='all')
    def setupLengthUnitClass(self, module, baseClass, table):
        c = module.createClass('LengthUnit', baseClass, table, createIdField=True, createNameField=True, createDescriptionField=True)
        c.createField(table.column('micro_metres'), 'microMetres')
    def setupBedClass(self, module, baseClass, table):
        c = module.createClass('Bed', baseClass, table)
        c.createField(table.column('id'), 'id')
        c.createField(table.column('position'), 'position')
        c.createField(table.column('bed_number'), 'bedNumber')
        c.createField(table.column('profile_id'), 'profile', backrefName='beds', relationClass='Profile', cascade='all')
        c.createField(table.column('height'), 'height')
        c.createField(table.column('height_length_unit_id'), 'heightLenghtUnit', relationClass='LengthUnit', cascade='all')
    def setupFieldBookEntryClass(self, module, baseClass, table):
        c = module.createClass('FieldBookEntry', baseClass, table)
        c.createField(table.column('id'), 'id')
        c.createField(table.column('field_book_id'), 'fieldBook', backrefName='entries', relationClass='FieldBook', cascade='all')
    def setupFieldBookClass(self, module, baseClass, table):
        c = module.createClass('FieldBook', baseClass, table, createIdField=True, createDescriptionField=True)
        c.createField(table.column('title'), 'title')
        c.addSortOrder(c.field('title'), ascending=True)
    def setupColorClass(self, module, baseClass, table):
        c = module.createClass('Color', baseClass, table, createIdField=True, createNameField=True, createDescriptionField=True)
        c.createField(table.column('project_id'), 'project', backrefName='colors', relationClass='Project', cascade='all')
        c.createField(table.column('graphic_primitive_id'), 'graphicPrimitive', backrefName='colors', relationClass='GraphicPrimitive', cascade='all')
        c.addSortOrder(c.field('name'), ascending=True)
    def setupProjectClass(self, module, baseClass, table):
        c = module.createClass('Project', baseClass, table, createIdField=True, createNameField=True, createDescriptionField=True)
        c.addSortOrder(c.field('name'), ascending=True)
    def setupProfileClass(self, module, baseClass, table):
        c = module.createClass('Profile', baseClass, table, createIdField=True, createNameField=True, createDescriptionField=True)
        c.createField(table.column('project_id'), 'project', backrefName='profiles', relationClass='Project', cascade='all')
        c.addSortOrder(c.field('name'), ascending=True)
