# Generated Persistance Layer for SQLAlchemy
from sqlalchemy import *
from sqlalchemy.orm import *
from Logic.Model.TectonicUnitInBed import *
from Logic.Model.ColorInBed import *
from Logic.Model.CustomSymbolInBed import *
from Logic.Model.CustomSymbol import *
from Logic.Model.TectonicUnitType import *
from Logic.Model.StratigraphicUnit import *
from Logic.Model.GrainSize import *
from Logic.Model.Fossil import *
from Logic.Model.GraphicPrimitive import *
from Logic.Model.StratigraphicUnitInBed import *
from Logic.Model.LithologicUnit import *
from Logic.Model.SedimentStructure import *
from Logic.Model.SedimentologicUnitType import *
from Logic.Model.Profile import *
from Logic.Model.GrainSizeInBed import *
from Logic.Model.Facies import *
from Logic.Model.Lithology import *
from Logic.Model.TectonicUnit import *
from Logic.Model.FieldBookEntry import *
from Logic.Model.BoundaryType import *
from Logic.Model.BeddingTypeInBed import *
from Logic.Model.OutcropTypeInBed import *
from Logic.Model.GrainSizeType import *
from Logic.Model.SedimentologicUnitInBed import *
from Logic.Model.SedimentologicUnit import *
from Logic.Model.Bed import *
from Logic.Model.Project import *
from Logic.Model.FieldBook import *
from Logic.Model.SedimentStructureInBed import *
from Logic.Model.BoundaryTypeInBed import *
from Logic.Model.BeddingType import *
from Logic.Model.ProfileColumnInProfile import *
from Logic.Model.ProfileColumn import *
from Logic.Model.OutcropType import *
from Logic.Model.Color import *
from Logic.Model.LithologicUnitType import *
from Logic.Model.Entity import *
from Logic.Model.LithologyInBed import *
from Logic.Model.StratigraphicUnitType import *
from Logic.Model.LithologicUnitInBed import *
from Logic.Model.FossilInBed import *
from Logic.Model.FaciesInBed import *
from Logic.Model.LengthUnit import *
class Database:
    def __init__(self):
        self.engine = None
        self.metadata = None
        self.session = None
    def setupTables(self):
        self.metadata = MetaData()
        self.tables = {}
        self.tables['data.tectonic_units_in_beds'] = Table('tectonic_units_in_beds', self.metadata, Column('bed_id', Integer, ForeignKey('data.beds.id'), nullable=True), Column('description', Unicode, nullable=True, server_default=''), Column('tectonic_unit_id', Integer, ForeignKey('data.tectonic_units.id'), nullable=True), Column('top', Integer, nullable=True, server_default='100'), Column('base', Integer, nullable=True, server_default='0'), Column('id', Integer, Sequence('seq_tectonic_units_in_beds', schema='data'), nullable=True, primary_key=True), CheckConstraint("top BETWEEN 0 and 100", name='chk_tectonic_units_in_beds_top_in_range'), CheckConstraint("base BETWEEN 0 and 100", name='chk_tectonic_units_in_beds_base_in_range'), schema='data')
        self.tables['data.colors_in_beds'] = Table('colors_in_beds', self.metadata, Column('bed_id', Integer, ForeignKey('data.beds.id'), nullable=True), Column('description', Unicode, nullable=True, server_default=''), Column('top', Integer, nullable=True, server_default='100'), Column('color_id', Integer, ForeignKey('data.colors.id'), nullable=True), Column('base', Integer, nullable=True, server_default='0'), Column('id', Integer, Sequence('seq_colors_in_beds', schema='data'), nullable=True, primary_key=True), CheckConstraint("top BETWEEN 0 and 100", name='chk_colors_in_beds_top_in_range'), CheckConstraint("base BETWEEN 0 and 100", name='chk_colors_in_beds_base_in_range'), schema='data')
        self.tables['data.custom_symbols_in_beds'] = Table('custom_symbols_in_beds', self.metadata, Column('custom_symbol_id', Integer, ForeignKey('data.custom_symbols.id'), nullable=True), Column('bed_id', Integer, ForeignKey('data.beds.id'), nullable=True), Column('description', Unicode, nullable=True, server_default=''), Column('top', Integer, nullable=True, server_default='100'), Column('base', Integer, nullable=True, server_default='0'), Column('id', Integer, Sequence('seq_custom_symbols_in_beds', schema='data'), nullable=True, primary_key=True), CheckConstraint("top BETWEEN 0 and 100", name='chk_custom_symbols_in_beds_top_in_range'), CheckConstraint("base BETWEEN 0 and 100", name='chk_custom_symbols_in_beds_base_in_range'), schema='data')
        self.tables['data.custom_symbols'] = Table('custom_symbols', self.metadata, Column('description', Unicode, nullable=True, server_default=''), Column('project_id', Integer, ForeignKey('data.projects.id'), nullable=True), Column('graphic_primitive_id', Integer, ForeignKey('data.graphic_primitives.id'), nullable=True), Column('id', Integer, Sequence('seq_custom_symbols', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('name', 'project_id', name='u_custom_symbols_name'), CheckConstraint("name <> ''", name='chk_custom_symbols_name_not_empty'), schema='data')
        self.tables['data.tectonic_unit_types'] = Table('tectonic_unit_types', self.metadata, Column('description', Unicode, nullable=True, server_default=''), Column('project_id', Integer, ForeignKey('data.projects.id'), nullable=True), Column('id', Integer, Sequence('seq_tectonic_unit_types', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('name', name='u_tectonic_unit_types_name'), CheckConstraint("name <> ''", name='chk_tectonic_unit_types_name_not_empty'), schema='data')
        self.tables['data.stratigraphic_units'] = Table('stratigraphic_units', self.metadata, Column('stratigraphic_unit_type_id', Integer, ForeignKey('data.stratigraphic_unit_types.id'), nullable=True), Column('description', Unicode, nullable=True, server_default=''), Column('graphic_primitive_id', Integer, ForeignKey('data.graphic_primitives.id'), nullable=True), Column('project_id', Integer, ForeignKey('data.projects.id'), nullable=True), Column('id', Integer, Sequence('seq_stratigraphic_units', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('name', 'project_id', name='u_stratigraphic_unit_in_project'), CheckConstraint("name <> ''", name='chk_stratigraphic_units_name_not_empty'), schema='data')
        self.tables['data.grain_sizes'] = Table('grain_sizes', self.metadata, Column('grain_size_type_id', Integer, ForeignKey('data.grain_size_types.id'), nullable=True), Column('description', Unicode, nullable=True, server_default=''), Column('percent_from_max', Integer, nullable=True, server_default='0'), Column('graphic_primitive_id', Integer, ForeignKey('data.graphic_primitives.id'), nullable=True), Column('project_id', Integer, ForeignKey('data.projects.id'), nullable=True), Column('id', Integer, Sequence('seq_grain_sizes', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('name', 'project_id', name='u_grain_size_in_project'), CheckConstraint("name <> ''", name='chk_grain_sizes_name_not_empty'), CheckConstraint("percent_from_max BETWEEN 0 and 100", name='chk_grain_sizes_percent_from_max_range'), schema='data')
        self.tables['data.fossils'] = Table('fossils', self.metadata, Column('description', Unicode, nullable=True, server_default=''), Column('project_id', Integer, ForeignKey('data.projects.id'), nullable=True), Column('graphic_primitive_id', Integer, ForeignKey('data.graphic_primitives.id'), nullable=True), Column('id', Integer, Sequence('seq_fossils', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('name', 'project_id', name='u_fossils_name'), CheckConstraint("name <> ''", name='chk_fossils_name_not_empty'), schema='data')
        self.tables['data.graphic_primitives'] = Table('graphic_primitives', self.metadata, Column('original_path', Unicode, nullable=True, server_default=''), Column('svg_data', Unicode, nullable=True, server_default=''), Column('description', Unicode, nullable=True, server_default=''), Column('id', Integer, Sequence('seq_graphic_primitives', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('name', name='u_graphic_primitives_name'), CheckConstraint("name <> ''", name='chk_graphic_primitives_name_not_empty'), schema='data')
        self.tables['data.stratigraphic_units_in_beds'] = Table('stratigraphic_units_in_beds', self.metadata, Column('bed_id', Integer, ForeignKey('data.beds.id'), nullable=True), Column('description', Unicode, nullable=True, server_default=''), Column('top', Integer, nullable=True, server_default='100'), Column('base', Integer, nullable=True, server_default='0'), Column('id', Integer, Sequence('seq_stratigraphic_units_in_beds', schema='data'), nullable=True, primary_key=True), Column('stratigraphic_unit_id', Integer, ForeignKey('data.stratigraphic_units.id'), nullable=True), CheckConstraint("base BETWEEN 0 and 100", name='chk_stratigraphic_units_in_beds_base_in_range'), CheckConstraint("top BETWEEN 0 and 100", name='chk_stratigraphic_units_in_beds_top_in_range'), schema='data')
        self.tables['data.lithologic_units'] = Table('lithologic_units', self.metadata, Column('description', Unicode, nullable=True, server_default=''), Column('lithologic_unit_type_id', Integer, ForeignKey('data.lithologic_unit_types.id'), nullable=True), Column('graphic_primitive_id', Integer, ForeignKey('data.graphic_primitives.id'), nullable=True), Column('project_id', Integer, ForeignKey('data.projects.id'), nullable=True), Column('id', Integer, Sequence('seq_lithologic_units', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('name', 'project_id', name='u_lithologic_unit_in_project'), CheckConstraint("name <> ''", name='chk_lithologic_units_name_not_empty'), schema='data')
        self.tables['data.sediment_structures'] = Table('sediment_structures', self.metadata, Column('description', Unicode, nullable=True, server_default=''), Column('project_id', Integer, ForeignKey('data.projects.id'), nullable=True), Column('graphic_primitive_id', Integer, ForeignKey('data.graphic_primitives.id'), nullable=True), Column('id', Integer, Sequence('seq_sediment_structures', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('name', 'project_id', name='u_sediment_structures_name'), CheckConstraint("name <> ''", name='chk_sediment_structures_name_not_empty'), schema='data')
        self.tables['data.sedimentologic_unit_types'] = Table('sedimentologic_unit_types', self.metadata, Column('description', Unicode, nullable=True, server_default=''), Column('project_id', Integer, ForeignKey('data.projects.id'), nullable=True), Column('id', Integer, Sequence('seq_sedimentologic_unit_types', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('name', name='u_sedimentologic_unit_types_name'), CheckConstraint("name <> ''", name='chk_sedimentologic_unit_types_name_not_empty'), schema='data')
        self.tables['data.profiles'] = Table('profiles', self.metadata, Column('description', Unicode, nullable=True, server_default=''), Column('project_id', Integer, ForeignKey('data.projects.id'), nullable=True), Column('id', Integer, Sequence('seq_profiles', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('project_id', 'name', name='u_profile_name_in_project'), CheckConstraint("name <> ''", name='chk_profiles_name_not_empty'), schema='data')
        self.tables['data.grain_sizes_in_beds'] = Table('grain_sizes_in_beds', self.metadata, Column('bed_id', Integer, ForeignKey('data.beds.id'), nullable=True), Column('grain_size_id', Integer, ForeignKey('data.grain_sizes.id'), nullable=True), Column('description', Unicode, nullable=True, server_default=''), Column('top', Integer, nullable=True, server_default='100'), Column('base', Integer, nullable=True, server_default='0'), Column('id', Integer, Sequence('seq_grain_sizes_in_beds', schema='data'), nullable=True, primary_key=True), CheckConstraint("top BETWEEN 0 and 100", name='chk_grain_sizes_in_beds_top_in_range'), CheckConstraint("base BETWEEN 0 and 100", name='chk_grain_sizes_in_beds_base_in_range'), schema='data')
        self.tables['data.facies'] = Table('facies', self.metadata, Column('description', Unicode, nullable=True, server_default=''), Column('project_id', Integer, ForeignKey('data.projects.id'), nullable=True), Column('graphic_primitive_id', Integer, ForeignKey('data.graphic_primitives.id'), nullable=True), Column('id', Integer, Sequence('seq_facies', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('name', 'project_id', name='u_facies_name'), CheckConstraint("name <> ''", name='chk_facies_name_not_empty'), schema='data')
        self.tables['data.lithologies'] = Table('lithologies', self.metadata, Column('description', Unicode, nullable=True, server_default=''), Column('project_id', Integer, ForeignKey('data.projects.id'), nullable=True), Column('graphic_primitive_id', Integer, ForeignKey('data.graphic_primitives.id'), nullable=True), Column('id', Integer, Sequence('seq_lithologies', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('name', 'project_id', name='u_lithologies_name'), CheckConstraint("name <> ''", name='chk_lithologies_name_not_empty'), schema='data')
        self.tables['data.tectonic_units'] = Table('tectonic_units', self.metadata, Column('description', Unicode, nullable=True, server_default=''), Column('tectonic_unit_type_id', Integer, ForeignKey('data.tectonic_unit_types.id'), nullable=True), Column('graphic_primitive_id', Integer, ForeignKey('data.graphic_primitives.id'), nullable=True), Column('project_id', Integer, ForeignKey('data.projects.id'), nullable=True), Column('id', Integer, Sequence('seq_tectonic_units', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('name', 'project_id', name='u_tectonic_unit_in_project'), CheckConstraint("name <> ''", name='chk_tectonic_units_name_not_empty'), schema='data')
        self.tables['data.field_book_entries'] = Table('field_book_entries', self.metadata, Column('field_book_id', Integer, ForeignKey('data.projects.id'), nullable=True), Column('id', Integer, Sequence('seq_field_book_entries', schema='data'), nullable=True, primary_key=True), schema='data')
        self.tables['data.boundary_types'] = Table('boundary_types', self.metadata, Column('description', Unicode, nullable=True, server_default=''), Column('project_id', Integer, ForeignKey('data.projects.id'), nullable=True), Column('graphic_primitive_id', Integer, ForeignKey('data.graphic_primitives.id'), nullable=True), Column('id', Integer, Sequence('seq_boundary_types', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('name', 'project_id', name='u_boundary_types_name'), CheckConstraint("name <> ''", name='chk_boundary_types_name_not_empty'), schema='data')
        self.tables['data.bedding_types_in_beds'] = Table('bedding_types_in_beds', self.metadata, Column('bed_id', Integer, ForeignKey('data.beds.id'), nullable=True), Column('description', Unicode, nullable=True, server_default=''), Column('top', Integer, nullable=True, server_default='100'), Column('base', Integer, nullable=True, server_default='0'), Column('bedding_type_id', Integer, ForeignKey('data.bedding_types.id'), nullable=True), Column('id', Integer, Sequence('seq_bedding_types_in_beds', schema='data'), nullable=True, primary_key=True), CheckConstraint("base BETWEEN 0 and 100", name='chk_bedding_types_in_beds_base_in_range'), CheckConstraint("top BETWEEN 0 and 100", name='chk_bedding_types_in_beds_top_in_range'), schema='data')
        self.tables['data.outcrop_types_in_beds'] = Table('outcrop_types_in_beds', self.metadata, Column('bed_id', Integer, ForeignKey('data.beds.id'), nullable=True), Column('description', Unicode, nullable=True, server_default=''), Column('outcrop_type_id', Integer, ForeignKey('data.outcrop_types.id'), nullable=True), Column('top', Integer, nullable=True, server_default='100'), Column('base', Integer, nullable=True, server_default='0'), Column('id', Integer, Sequence('seq_outcrop_types_in_beds', schema='data'), nullable=True, primary_key=True), CheckConstraint("base BETWEEN 0 and 100", name='chk_outcrop_types_in_beds_base_in_range'), CheckConstraint("top BETWEEN 0 and 100", name='chk_outcrop_types_in_beds_top_in_range'), schema='data')
        self.tables['data.grain_size_types'] = Table('grain_size_types', self.metadata, Column('description', Unicode, nullable=True, server_default=''), Column('project_id', Integer, ForeignKey('data.projects.id'), nullable=True), Column('id', Integer, Sequence('seq_grain_size_types', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('name', name='u_grain_size_types_name'), CheckConstraint("name <> ''", name='chk_grain_size_types_name_not_empty'), schema='data')
        self.tables['data.sedimentologic_units_in_beds'] = Table('sedimentologic_units_in_beds', self.metadata, Column('bed_id', Integer, ForeignKey('data.beds.id'), nullable=True), Column('description', Unicode, nullable=True, server_default=''), Column('top', Integer, nullable=True, server_default='100'), Column('sedimentologic_unit_id', Integer, ForeignKey('data.sedimentologic_units.id'), nullable=True), Column('base', Integer, nullable=True, server_default='0'), Column('id', Integer, Sequence('seq_sedimentologic_units_in_beds', schema='data'), nullable=True, primary_key=True), CheckConstraint("base BETWEEN 0 and 100", name='chk_sedimentologic_units_in_beds_base_in_range'), CheckConstraint("top BETWEEN 0 and 100", name='chk_sedimentologic_units_in_beds_top_in_range'), schema='data')
        self.tables['data.sedimentologic_units'] = Table('sedimentologic_units', self.metadata, Column('description', Unicode, nullable=True, server_default=''), Column('sedimentologic_unit_type_id', Integer, ForeignKey('data.sedimentologic_unit_types.id'), nullable=True), Column('graphic_primitive_id', Integer, ForeignKey('data.graphic_primitives.id'), nullable=True), Column('project_id', Integer, ForeignKey('data.projects.id'), nullable=True), Column('id', Integer, Sequence('seq_sedimentologic_units', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('name', 'project_id', name='u_sedimentologic_unit_in_project'), CheckConstraint("name <> ''", name='chk_sedimentologic_units_name_not_empty'), schema='data')
        self.tables['data.beds'] = Table('beds', self.metadata, Column('description', Unicode, nullable=True, server_default=''), Column('bed_number', Unicode, nullable=True), Column('height_length_unit_id', Integer, ForeignKey('data.length_units.id'), nullable=True), Column('profile_id', Integer, ForeignKey('data.projects.id'), nullable=True), Column('height', Integer, nullable=True, server_default='0'), Column('position', Integer, nullable=True), Column('id', Integer, Sequence('seq_beds', schema='data'), nullable=True, primary_key=True), UniqueConstraint('bed_number', name='u_beds_bed_number'), UniqueConstraint('profile_id', 'bed_number', name='u_bed_number_in_profile'), CheckConstraint("bed_number <> ''", name='chk_beds_bed_number_not_empty'), schema='data')
        self.tables['data.projects'] = Table('projects', self.metadata, Column('description', Unicode, nullable=True, server_default=''), Column('id', Integer, Sequence('seq_projects', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), CheckConstraint("name <> ''", name='chk_projects_name_not_empty'), schema='data')
        self.tables['data.field_books'] = Table('field_books', self.metadata, Column('title', Unicode, nullable=True, server_default='new field book'), Column('id', Integer, Sequence('seq_field_books', schema='data'), nullable=True, primary_key=True), Column('description', Unicode, nullable=True, server_default=''), CheckConstraint("title <> ''", name='chk_field_books_title_not_empty'), schema='data')
        self.tables['data.sediment_structures_in_beds'] = Table('sediment_structures_in_beds', self.metadata, Column('bed_id', Integer, ForeignKey('data.beds.id'), nullable=True), Column('sediment_structure_id', Integer, ForeignKey('data.sediment_structures.id'), nullable=True), Column('description', Unicode, nullable=True, server_default=''), Column('top', Integer, nullable=True, server_default='100'), Column('base', Integer, nullable=True, server_default='0'), Column('id', Integer, Sequence('seq_sediment_structures_in_beds', schema='data'), nullable=True, primary_key=True), CheckConstraint("top BETWEEN 0 and 100", name='chk_sediment_structures_in_beds_top_in_range'), CheckConstraint("base BETWEEN 0 and 100", name='chk_sediment_structures_in_beds_base_in_range'), schema='data')
        self.tables['data.boundary_types_in_beds'] = Table('boundary_types_in_beds', self.metadata, Column('bed_id', Integer, ForeignKey('data.beds.id'), nullable=True), Column('boundary_type_id', Integer, ForeignKey('data.boundary_types.id'), nullable=True), Column('description', Unicode, nullable=True, server_default=''), Column('top', Integer, nullable=True, server_default='100'), Column('base', Integer, nullable=True, server_default='0'), Column('id', Integer, Sequence('seq_boundary_types_in_beds', schema='data'), nullable=True, primary_key=True), CheckConstraint("top BETWEEN 0 and 100", name='chk_boundary_types_in_beds_top_in_range'), CheckConstraint("base BETWEEN 0 and 100", name='chk_boundary_types_in_beds_base_in_range'), schema='data')
        self.tables['data.bedding_types'] = Table('bedding_types', self.metadata, Column('description', Unicode, nullable=True, server_default=''), Column('project_id', Integer, ForeignKey('data.projects.id'), nullable=True), Column('graphic_primitive_id', Integer, ForeignKey('data.graphic_primitives.id'), nullable=True), Column('id', Integer, Sequence('seq_bedding_types', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('name', 'project_id', name='u_bedding_types_name'), CheckConstraint("name <> ''", name='chk_bedding_types_name_not_empty'), schema='data')
        self.tables['data.profile_columns_in_profiles'] = Table('profile_columns_in_profiles', self.metadata, Column('position', Integer, nullable=True, server_default='0'), Column('profile_id', Integer, ForeignKey('data.profiles.id'), nullable=True), Column('id', Integer, Sequence('seq_profile_columns_in_profiles', schema='data'), nullable=True, primary_key=True), Column('profile_column_id', Integer, ForeignKey('data.profile_columns.id'), nullable=True), schema='data')
        self.tables['data.profile_columns'] = Table('profile_columns', self.metadata, Column('description', Unicode, nullable=True, server_default=''), Column('id', Integer, Sequence('seq_profile_columns', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('name', name='u_profile_columns_name'), CheckConstraint("name <> ''", name='chk_profile_columns_name_not_empty'), schema='data')
        self.tables['data.outcrop_types'] = Table('outcrop_types', self.metadata, Column('description', Unicode, nullable=True, server_default=''), Column('project_id', Integer, ForeignKey('data.projects.id'), nullable=True), Column('graphic_primitive_id', Integer, ForeignKey('data.graphic_primitives.id'), nullable=True), Column('id', Integer, Sequence('seq_outcrop_types', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('name', 'project_id', name='u_outcrop_types_name'), CheckConstraint("name <> ''", name='chk_outcrop_types_name_not_empty'), schema='data')
        self.tables['data.colors'] = Table('colors', self.metadata, Column('description', Unicode, nullable=True, server_default=''), Column('project_id', Integer, ForeignKey('data.projects.id'), nullable=True), Column('graphic_primitive_id', Integer, ForeignKey('data.graphic_primitives.id'), nullable=True), Column('id', Integer, Sequence('seq_colors', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('name', 'project_id', name='u_colors_name'), CheckConstraint("name <> ''", name='chk_colors_name_not_empty'), schema='data')
        self.tables['data.lithologic_unit_types'] = Table('lithologic_unit_types', self.metadata, Column('description', Unicode, nullable=True, server_default=''), Column('project_id', Integer, ForeignKey('data.projects.id'), nullable=True), Column('id', Integer, Sequence('seq_lithologic_unit_types', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('name', name='u_lithologic_unit_types_name'), CheckConstraint("name <> ''", name='chk_lithologic_unit_types_name_not_empty'), schema='data')
        self.tables['data.lithologies_in_beds'] = Table('lithologies_in_beds', self.metadata, Column('bed_id', Integer, ForeignKey('data.beds.id'), nullable=True), Column('description', Unicode, nullable=True, server_default=''), Column('top', Integer, nullable=True, server_default='100'), Column('base', Integer, nullable=True, server_default='0'), Column('lithology_id', Integer, ForeignKey('data.lithologies.id'), nullable=True), Column('id', Integer, Sequence('seq_lithologies_in_beds', schema='data'), nullable=True, primary_key=True), CheckConstraint("top BETWEEN 0 and 100", name='chk_lithologies_in_beds_top_in_range'), CheckConstraint("base BETWEEN 0 and 100", name='chk_lithologies_in_beds_base_in_range'), schema='data')
        self.tables['data.stratigraphic_unit_types'] = Table('stratigraphic_unit_types', self.metadata, Column('description', Unicode, nullable=True, server_default=''), Column('project_id', Integer, ForeignKey('data.projects.id'), nullable=True), Column('id', Integer, Sequence('seq_stratigraphic_unit_types', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('name', name='u_stratigraphic_unit_types_name'), CheckConstraint("name <> ''", name='chk_stratigraphic_unit_types_name_not_empty'), schema='data')
        self.tables['data.lithologic_units_in_beds'] = Table('lithologic_units_in_beds', self.metadata, Column('bed_id', Integer, ForeignKey('data.beds.id'), nullable=True), Column('description', Unicode, nullable=True, server_default=''), Column('top', Integer, nullable=True, server_default='100'), Column('lithologic_unit_id', Integer, ForeignKey('data.lithologic_units.id'), nullable=True), Column('base', Integer, nullable=True, server_default='0'), Column('id', Integer, Sequence('seq_lithologic_units_in_beds', schema='data'), nullable=True, primary_key=True), CheckConstraint("base BETWEEN 0 and 100", name='chk_lithologic_units_in_beds_base_in_range'), CheckConstraint("top BETWEEN 0 and 100", name='chk_lithologic_units_in_beds_top_in_range'), schema='data')
        self.tables['data.fossils_in_beds'] = Table('fossils_in_beds', self.metadata, Column('bed_id', Integer, ForeignKey('data.beds.id'), nullable=True), Column('description', Unicode, nullable=True, server_default=''), Column('fossil_id', Integer, ForeignKey('data.fossils.id'), nullable=True), Column('top', Integer, nullable=True, server_default='100'), Column('base', Integer, nullable=True, server_default='0'), Column('id', Integer, Sequence('seq_fossils_in_beds', schema='data'), nullable=True, primary_key=True), CheckConstraint("top BETWEEN 0 and 100", name='chk_fossils_in_beds_top_in_range'), CheckConstraint("base BETWEEN 0 and 100", name='chk_fossils_in_beds_base_in_range'), schema='data')
        self.tables['data.facies_in_beds'] = Table('facies_in_beds', self.metadata, Column('bed_id', Integer, ForeignKey('data.beds.id'), nullable=True), Column('description', Unicode, nullable=True, server_default=''), Column('top', Integer, nullable=True, server_default='100'), Column('facies_id', Integer, ForeignKey('data.facies.id'), nullable=True), Column('base', Integer, nullable=True, server_default='0'), Column('id', Integer, Sequence('seq_facies_in_beds', schema='data'), nullable=True, primary_key=True), CheckConstraint("top BETWEEN 0 and 100", name='chk_facies_in_beds_top_in_range'), CheckConstraint("base BETWEEN 0 and 100", name='chk_facies_in_beds_base_in_range'), schema='data')
        self.tables['data.length_units'] = Table('length_units', self.metadata, Column('description', Unicode, nullable=True, server_default=''), Column('micro_metres', Integer, nullable=True, server_default='0'), Column('id', Integer, Sequence('seq_length_units', schema='data'), nullable=True, primary_key=True), Column('name', Unicode, nullable=True, server_default='new item'), UniqueConstraint('name', name='u_length_units_name'), UniqueConstraint('micro_metres', name='u_length_units_micro_metres'), CheckConstraint("name <> ''", name='chk_length_units_name_not_empty'), schema='data')
    def setupMappers(self):
        clear_mappers()
        mapper(TectonicUnitInBed, self.tables['data.tectonic_units_in_beds'], properties={})
        mapper(ColorInBed, self.tables['data.colors_in_beds'], properties={})
        mapper(CustomSymbolInBed, self.tables['data.custom_symbols_in_beds'], properties={})
        mapper(CustomSymbol, self.tables['data.custom_symbols'], properties={'id': self.tables['data.custom_symbols'].c.id, 'name': self.tables['data.custom_symbols'].c.name, 'description': self.tables['data.custom_symbols'].c.description, 'project': relation(Project, backref='customSymbols', cascade='all'), 'graphicPrimitive': relation(GraphicPrimitive, backref='customSymbols', cascade='all')}, order_by=[self.tables['data.custom_symbols'].c.name.asc()])
        mapper(TectonicUnitType, self.tables['data.tectonic_unit_types'], properties={'id': self.tables['data.tectonic_unit_types'].c.id, 'name': self.tables['data.tectonic_unit_types'].c.name, 'description': self.tables['data.tectonic_unit_types'].c.description, 'project': relation(Project, backref='tectonic_unit_types', cascade='all')}, order_by=[self.tables['data.tectonic_unit_types'].c.name.asc()])
        mapper(StratigraphicUnit, self.tables['data.stratigraphic_units'], properties={'id': self.tables['data.stratigraphic_units'].c.id, 'name': self.tables['data.stratigraphic_units'].c.name, 'description': self.tables['data.stratigraphic_units'].c.description, 'project': relation(Project, backref='stratigraphic_units', cascade='all'), 'stratigraphicUnitType': relation(StratigraphicUnitType, backref='stratigraphicUnits', cascade='all'), 'graphicPrimitive': relation(GraphicPrimitive, backref='stratigraphicUnits', cascade='all')}, order_by=[self.tables['data.stratigraphic_units'].c.name.asc()])
        mapper(GrainSize, self.tables['data.grain_sizes'], properties={'id': self.tables['data.grain_sizes'].c.id, 'name': self.tables['data.grain_sizes'].c.name, 'description': self.tables['data.grain_sizes'].c.description, 'project': relation(Project, backref='grain_sizes', cascade='all'), 'grainSizeType': relation(GrainSizeType, backref='grainSizes', cascade='all'), 'graphicPrimitive': relation(GraphicPrimitive, backref='grainSizes', cascade='all'), 'percentFromMax': self.tables['data.grain_sizes'].c.percent_from_max}, order_by=[self.tables['data.grain_sizes'].c.name.asc()])
        mapper(Fossil, self.tables['data.fossils'], properties={'id': self.tables['data.fossils'].c.id, 'name': self.tables['data.fossils'].c.name, 'description': self.tables['data.fossils'].c.description, 'project': relation(Project, backref='fossils', cascade='all'), 'graphicPrimitive': relation(GraphicPrimitive, backref='fossils', cascade='all')}, order_by=[self.tables['data.fossils'].c.name.asc()])
        mapper(GraphicPrimitive, self.tables['data.graphic_primitives'], properties={})
        mapper(StratigraphicUnitInBed, self.tables['data.stratigraphic_units_in_beds'], properties={})
        mapper(LithologicUnit, self.tables['data.lithologic_units'], properties={'id': self.tables['data.lithologic_units'].c.id, 'name': self.tables['data.lithologic_units'].c.name, 'description': self.tables['data.lithologic_units'].c.description, 'project': relation(Project, backref='lithologic_units', cascade='all'), 'lithologicUnitType': relation(LithologicUnitType, backref='lithologicUnits', cascade='all'), 'graphicPrimitive': relation(GraphicPrimitive, backref='lithologicUnits', cascade='all')}, order_by=[self.tables['data.lithologic_units'].c.name.asc()])
        mapper(SedimentStructure, self.tables['data.sediment_structures'], properties={'id': self.tables['data.sediment_structures'].c.id, 'name': self.tables['data.sediment_structures'].c.name, 'description': self.tables['data.sediment_structures'].c.description, 'project': relation(Project, backref='sedimentStructures', cascade='all'), 'graphicPrimitive': relation(GraphicPrimitive, backref='sedimentStructures', cascade='all')}, order_by=[self.tables['data.sediment_structures'].c.name.asc()])
        mapper(SedimentologicUnitType, self.tables['data.sedimentologic_unit_types'], properties={'id': self.tables['data.sedimentologic_unit_types'].c.id, 'name': self.tables['data.sedimentologic_unit_types'].c.name, 'description': self.tables['data.sedimentologic_unit_types'].c.description, 'project': relation(Project, backref='sedimentologic_unit_types', cascade='all')}, order_by=[self.tables['data.sedimentologic_unit_types'].c.name.asc()])
        mapper(Profile, self.tables['data.profiles'], properties={'id': self.tables['data.profiles'].c.id, 'name': self.tables['data.profiles'].c.name, 'description': self.tables['data.profiles'].c.description, 'project': relation(Project, backref='profiles', cascade='all')}, order_by=[self.tables['data.profiles'].c.name.asc()])
        mapper(GrainSizeInBed, self.tables['data.grain_sizes_in_beds'], properties={})
        mapper(Facies, self.tables['data.facies'], properties={'id': self.tables['data.facies'].c.id, 'name': self.tables['data.facies'].c.name, 'description': self.tables['data.facies'].c.description, 'project': relation(Project, backref='facies', cascade='all'), 'graphicPrimitive': relation(GraphicPrimitive, backref='facies', cascade='all')}, order_by=[self.tables['data.facies'].c.name.asc()])
        mapper(Lithology, self.tables['data.lithologies'], properties={'id': self.tables['data.lithologies'].c.id, 'name': self.tables['data.lithologies'].c.name, 'description': self.tables['data.lithologies'].c.description, 'project': relation(Project, backref='lithologies', cascade='all'), 'graphicPrimitive': relation(GraphicPrimitive, backref='lithologies', cascade='all')}, order_by=[self.tables['data.lithologies'].c.name.asc()])
        mapper(TectonicUnit, self.tables['data.tectonic_units'], properties={'id': self.tables['data.tectonic_units'].c.id, 'name': self.tables['data.tectonic_units'].c.name, 'description': self.tables['data.tectonic_units'].c.description, 'project': relation(Project, backref='tectonic_units', cascade='all'), 'tectonicUnitType': relation(TectonicUnitType, backref='tectonicUnits', cascade='all'), 'graphicPrimitive': relation(GraphicPrimitive, backref='tectonicUnits', cascade='all')}, order_by=[self.tables['data.tectonic_units'].c.name.asc()])
        mapper(FieldBookEntry, self.tables['data.field_book_entries'], properties={})
        mapper(BoundaryType, self.tables['data.boundary_types'], properties={'id': self.tables['data.boundary_types'].c.id, 'name': self.tables['data.boundary_types'].c.name, 'description': self.tables['data.boundary_types'].c.description, 'project': relation(Project, backref='boundaryTypes', cascade='all'), 'graphicPrimitive': relation(GraphicPrimitive, backref='boundaryTypes', cascade='all')}, order_by=[self.tables['data.boundary_types'].c.name.asc()])
        mapper(BeddingTypeInBed, self.tables['data.bedding_types_in_beds'], properties={})
        mapper(OutcropTypeInBed, self.tables['data.outcrop_types_in_beds'], properties={})
        mapper(GrainSizeType, self.tables['data.grain_size_types'], properties={'id': self.tables['data.grain_size_types'].c.id, 'name': self.tables['data.grain_size_types'].c.name, 'description': self.tables['data.grain_size_types'].c.description, 'project': relation(Project, backref='grain_size_types', cascade='all')}, order_by=[self.tables['data.grain_size_types'].c.name.asc()])
        mapper(SedimentologicUnitInBed, self.tables['data.sedimentologic_units_in_beds'], properties={})
        mapper(SedimentologicUnit, self.tables['data.sedimentologic_units'], properties={'id': self.tables['data.sedimentologic_units'].c.id, 'name': self.tables['data.sedimentologic_units'].c.name, 'description': self.tables['data.sedimentologic_units'].c.description, 'project': relation(Project, backref='sedimentologic_units', cascade='all'), 'sedimentologicUnitType': relation(SedimentologicUnitType, backref='sedimentologicUnits', cascade='all'), 'graphicPrimitive': relation(GraphicPrimitive, backref='sedimentologicUnits', cascade='all')}, order_by=[self.tables['data.sedimentologic_units'].c.name.asc()])
        mapper(Bed, self.tables['data.beds'], properties={})
        mapper(Project, self.tables['data.projects'], properties={'id': self.tables['data.projects'].c.id, 'name': self.tables['data.projects'].c.name, 'description': self.tables['data.projects'].c.description}, order_by=[self.tables['data.projects'].c.name.asc()])
        mapper(FieldBook, self.tables['data.field_books'], properties={'id': self.tables['data.field_books'].c.id, 'description': self.tables['data.field_books'].c.description, 'title': self.tables['data.field_books'].c.title}, order_by=[self.tables['data.field_books'].c.title.asc()])
        mapper(SedimentStructureInBed, self.tables['data.sediment_structures_in_beds'], properties={})
        mapper(BoundaryTypeInBed, self.tables['data.boundary_types_in_beds'], properties={})
        mapper(BeddingType, self.tables['data.bedding_types'], properties={'id': self.tables['data.bedding_types'].c.id, 'name': self.tables['data.bedding_types'].c.name, 'description': self.tables['data.bedding_types'].c.description, 'project': relation(Project, backref='beddingTypes', cascade='all'), 'graphicPrimitive': relation(GraphicPrimitive, backref='beddingTypes', cascade='all')}, order_by=[self.tables['data.bedding_types'].c.name.asc()])
        mapper(ProfileColumnInProfile, self.tables['data.profile_columns_in_profiles'], properties={'profile': relation(Profile, backref='profileColumns', cascade='all'), 'profileColumn': relation(ProfileColumn, backref='profile', cascade='all'), 'position': self.tables['data.profile_columns_in_profiles'].c.position}, order_by=[self.tables['data.profile_columns_in_profiles'].c.position.asc()])
        mapper(ProfileColumn, self.tables['data.profile_columns'], properties={})
        mapper(OutcropType, self.tables['data.outcrop_types'], properties={'id': self.tables['data.outcrop_types'].c.id, 'name': self.tables['data.outcrop_types'].c.name, 'description': self.tables['data.outcrop_types'].c.description, 'project': relation(Project, backref='outcrop_types', cascade='all'), 'graphicPrimitive': relation(GraphicPrimitive, backref='outcrop_types', cascade='all')}, order_by=[self.tables['data.outcrop_types'].c.name.asc()])
        mapper(Color, self.tables['data.colors'], properties={'id': self.tables['data.colors'].c.id, 'name': self.tables['data.colors'].c.name, 'description': self.tables['data.colors'].c.description, 'project': relation(Project, backref='colors', cascade='all'), 'graphicPrimitive': relation(GraphicPrimitive, backref='colors', cascade='all')}, order_by=[self.tables['data.colors'].c.name.asc()])
        mapper(LithologicUnitType, self.tables['data.lithologic_unit_types'], properties={'id': self.tables['data.lithologic_unit_types'].c.id, 'name': self.tables['data.lithologic_unit_types'].c.name, 'description': self.tables['data.lithologic_unit_types'].c.description, 'project': relation(Project, backref='lithologic_unit_types', cascade='all')}, order_by=[self.tables['data.lithologic_unit_types'].c.name.asc()])
        mapper(LithologyInBed, self.tables['data.lithologies_in_beds'], properties={})
        mapper(StratigraphicUnitType, self.tables['data.stratigraphic_unit_types'], properties={'id': self.tables['data.stratigraphic_unit_types'].c.id, 'name': self.tables['data.stratigraphic_unit_types'].c.name, 'description': self.tables['data.stratigraphic_unit_types'].c.description, 'project': relation(Project, backref='stratigraphic_unit_types', cascade='all')}, order_by=[self.tables['data.stratigraphic_unit_types'].c.name.asc()])
        mapper(LithologicUnitInBed, self.tables['data.lithologic_units_in_beds'], properties={})
        mapper(FossilInBed, self.tables['data.fossils_in_beds'], properties={})
        mapper(FaciesInBed, self.tables['data.facies_in_beds'], properties={})
        mapper(LengthUnit, self.tables['data.length_units'], properties={})
    def open(self, connectionData):
        self.setupTables()
        self.setupMappers()
        self.engine = create_engine(connectionData.makeConnectionString(), echo=True)
        self.engine.connect()
        self.session = create_session(bind=self.engine, autocommit=False, autoflush=False)
        self.metadata.bind = self.engine
        if connectionData.createSchema:
            self.metadata.create_all()
    def begin(self):
        return self.session.begin()
    def commit(self):
        self.session.commit()
    def rollback(self):
        self.session.rollback()